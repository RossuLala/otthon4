-----------------------------
ANGULAR PROJEKT LÉPÉSENKÉNT:
----------------------------

GIT beállítása:
---------------

Repo létrehozása a GitHub-on:
https://github.com/RossuLala


git init
git add -- all                     // figyeld ezeket a fájlokat
git status                         // státusz lekérdezése
git commit -m "első verzió"        // egy változat feltöltése
git remote add origin https://github.com/RossuLala/xxx // ide kell tölteni
git remote -- verbose              //leellenőrzés
git push -u origin master          // feltöltés


Új Angular projekt létrehozása:
-------------------------------
ng new otthon4

npm i bootstrap -g  --- Bootstrap installálása (–g központi)
npm i jquery -g  --- jQery installálása
src/angular.json --- fájlban beállítani a Bootsrap és JQery elérést
Crtl+C szerver leállítás

Csontváz letöltése:
-------------------
https://getbootstrap.com/docs/3.3/getting-started/
app.component.html - be másolni a forrás body részét

Csontváz css és js fáljainak bemásoláda az angularba.


Komponensek létrehozása (csontváz szétdarabolása)
-------------------------------------------------
ng g component my-new-component 



*ngFor - LISTÁK MEGJELENÍTÉSE:
--------------------
 <tbody>
        <tr *ngFor= "let user of users">
          <td>{{ user.id }}</td>
          <td>{{ user.lastName }}</td>
          <td>{{ user.firsName }}</td>
          <td>{{ user.email}}</td>
          <td>{{ user.phone }}</td>
          <td>{{ user.relatives }}</td>
        </tr>
  </tbody>

Az "*n" megváltoztatja a HTML-t.
A "*ngFor" végigmegy a "users" tömb összes elemén és az "user" elemeket betölti.


OnInit 
--------------------------------
//implementáltuk az OnInit interfészt:

export class ContentComponent implements OnInit { 

  users = [];
  

  constructor() {}

  ngOnInit() {                                     //Az ngOnInit-hez kell 
    let user1 = new User (1,'aaa1', 'bbb1','ccc1','ddd1')
    let user2 = new User (2,'aaa2', 'bbb2','ccc2','ddd2')
    let user3 = new User (3,'aaa3', 'bbb3','ccc3','ddd3')
    this.users.push (user1);
    this.users.push (user2);
    this.users.push (user3);
  }
}

KIEGÉSTÍTŐ TELEPÍTÉSE: TypeScript Importer
------------------------------------------
Kiírja, ha egy objektum hiányol valamit.


SZERVÍZ LÉTREHOZÁSA
-------------------
ng g service user

SERVICE - elérhetővé tétele mindenhonnan
----------------------------------------
app.module.ts   - providerben kell beállítnai hogy mindenhonna elérhető legyen


ADAT KAPCSOLÁS:
---------------
.ts
ngOnInit()--
import { UserService } from '../user.service';
-- Importáluk a szervízt ami az adatokat adja át

this.urlChanged.emit({ url: this.currentUrl, data})
-- átadjuk az adatokat az esemnykezelőnek

ngOnInit() {                           
  this.urlService.urlChanged.subscribe(        //figyelünk és feliratkozunk az eseményre
    (e) => { this.currentLink = e.url;}
  );
  this.currentLink = this.urlService.currentUrl;
  this.users = this.userService.getAll();
}
-- Figyeljük az eseményt


Könytár elérhetővé tétele:
--------------------------
[package.json]
-- be kell állítani a könytárat:
"assets": [
              "src/favicon.ico",
              "asc/api",
              "src/assets"
            ],

            
HTTP modul használatához kell!!!:
---------------------------------
[app.module.ts]
-- be kell importálni a HTTP modult a fordításhoz
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule


OBSERVABLES eseménykezelés NEXT-SUBSCRIBE:
------------------------------------------
https://angular-2-training-book.rangle.io/handout/observables/using_observables.html

[user.service.ts]
import { Observable, Subject } from 'rxjs';                                         //Beimportájuk a Subjektet
..
@Injectable()
export class UserService {
    ..
    userObserver: Subject<any> = new Subject();                                      // létrehozunk egy Subjektet amit figyelni tudunk
..
getUserWidthObserver() {
        this.http.get(this.config.get('usersApi')).subscribe( 
                (response: Response) => {              
                    //console.log('user.sevice - Response', response.json());         
                    this.users = this.jsonToUser(response.json())
                    this.userObserver.next(this.users);                              //next hatására lefut a subscribe
                },
                (error) => {                           
                    this.userObserver.error("Hiba az observerben");
                }
            );
        );
    }

[contetnt.component.ts]
this.userService.userObserver.subscribe(                                            //next hatására lefut a subscribe
        (users) =>{
          //console.log('content - users', users);
          this.usersCount = users.length;
        }
      )

OBSERVABLES - OnDestroy - leiratkozás, hogy ne mejen tele a memória:
--------------------------------------------------------------------
[user-table...js]
import { OnDestroy } from '@angular/core';
..
userSubscribe = null;  //letárolom, hogy miról kell leiratkozni a ngOnDestroy()-al
..
ngOnInit() {
        this.users = this.userService.users;
        this.userSubscribe = this.userService.userObserver.subscribe( //letárolom, hogy miről kell leiratkozni
            (users) => {
                this.users = users;
            },
            (err) => {
                this.users = [];
            }
        )
    }

ngOnDestroy(): void {
   this.userSubscribe.unsubscribe()   //leiratkozok az esemnyről, hogy ne menjen lete e memória
}


SZEVER INDÍTÁSA:
----------------
node server

CRUD:
-----
Create Read Update Delete



